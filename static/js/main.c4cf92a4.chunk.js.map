{"version":3,"sources":["components/QuoteMashine.js","App.js","index.js"],"names":["QuoteMashine","assignNewQuoteMethod","selectedQuote","Card","id","CardContent","Typography","variant","color","quote","author","CardActions","className","target","href","encodeURI","icon","faTwitter","size","Button","onClick","App","props","state","quotes","selectedIndex","bind","fetch","then","data","json","setState","this","length","random","console","log","Grid","classes","root","justify","container","xs","lg","item","Number","isInteger","React","Component","withStyles","alignItems","display","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kUAsCeA,EA5BM,SAAC,GAAD,IAAGC,EAAH,EAAGA,qBAAsBC,EAAzB,EAAyBA,cAAzB,OACnB,kBAACC,EAAA,EAAD,CAAMC,GAAG,QACP,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,aAA/B,KACKN,EAAcO,MADnB,QAC+B,IAC7B,0BAAML,GAAG,UAAUF,EAAcQ,OAAjC,OAGJ,kBAACC,EAAA,EAAD,CAAaC,UAAU,eAErB,kBAAC,IAAD,CACEJ,MAAM,UACNK,OAAO,SACPT,GAAG,cACHU,KAAMC,UAAU,yCAAD,OAC4Bb,EAAcO,SAGzD,kBAAC,IAAD,CAAiBO,KAAMC,IAAWC,KAAK,QAGzC,kBAACC,EAAA,EAAD,CAAQf,GAAG,YAAYc,KAAK,QAAQE,QAASnB,GAA7C,iB,+BChBAoB,G,wDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,OAAQ,GACRC,cAAe,MAEjB,EAAKA,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKzB,qBAAuB,EAAKA,qBAAqByB,KAA1B,gBAPX,E,gEAUE,IAAD,OAClBC,MACE,yIAECC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACJ,GAAD,OAAY,EAAKO,SAAS,CAAEP,UAAU,EAAKvB,2B,sCAInD,GAAK+B,KAAKT,MAAMC,OAAOS,OAGvB,OAAOC,iBAAO,EAAGF,KAAKT,MAAMC,OAAOS,OAAS,K,6CAc5CD,KAAKD,SAAS,CAAEN,cAAeO,KAAKP,oB,+BAKpC,OADAU,QAAQC,IAAIJ,KAAKT,MAAME,eAErB,kBAACY,EAAA,EAAD,CACEzB,UAAWoB,KAAKV,MAAMgB,QAAQC,KAC9BnC,GAAG,YACHoC,QAAQ,SACRC,WAAS,GAET,kBAACJ,EAAA,EAAD,CAAMK,GAAI,GAAIC,GAAI,EAAGC,MAAI,GACtBZ,KAAK9B,cACJ,kBAAC,EAAD,CACEA,cAAe8B,KAAK9B,cACpBD,qBAAsB+B,KAAK/B,uBAE3B,S,oCA5BV,GACG+B,KAAKT,MAAMC,OAAOS,QAClBY,OAAOC,UAAUd,KAAKT,MAAME,eAK/B,OAAOO,KAAKT,MAAMC,OAAOQ,KAAKT,MAAME,mB,GAlCtBsB,IAAMC,YA8DTC,cAvEA,CACbV,KAAM,CACJW,WAAY,SACZC,QAAS,OACTC,OAAQ,QACR5C,MAAO,QAkEIyC,CAAmB5B,GCxElCgC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.c4cf92a4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport IconButton from \"@material-ui/core/Button\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nconst QuoteMashine = ({ assignNewQuoteMethod, selectedQuote }) => (\r\n  <Card id=\"text\">\r\n    <CardContent>\r\n      <Typography variant=\"h5\" color=\"secondary\">\r\n        \" {selectedQuote.quote}\" ---{\" \"}\r\n        <span id=\"author\">{selectedQuote.author} </span>\r\n      </Typography>\r\n    </CardContent>\r\n    <CardActions className=\"buttonClass\">\r\n      \r\n      <IconButton\r\n        color=\"primary\"\r\n        target=\"_blank\"\r\n        id=\"tweet-quote\"\r\n        href={encodeURI(\r\n          `https://twitter.com/intent/tweet?text=${selectedQuote.quote}`\r\n        )}\r\n      >\r\n        <FontAwesomeIcon icon={faTwitter} size=\"md\"></FontAwesomeIcon>\r\n        \r\n      </IconButton>\r\n      <Button id=\"new-quote\" size=\"small\" onClick={assignNewQuoteMethod}>\r\n        Next Quote\r\n      </Button>\r\n    </CardActions>\r\n  </Card>\r\n);\r\n\r\nexport default QuoteMashine;\r\n","import React from \"react\";\nimport QuoteMashine from \"./components/QuoteMashine\";\nimport { random } from \"lodash\";\nimport \"typeface-roboto\";\nimport { Grid, withStyles } from \"@material-ui/core\";\nimport \"./App.css\";\nconst styles = {\n  root: {\n    alignItems: \"center\",\n    display: \"flex\",\n    height: \"100vh\",\n    color: \"red\",\n  },\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quotes: [],\n      selectedIndex: null,\n    };\n    this.selectedIndex = this.selectedIndex.bind(this);\n    this.assignNewQuoteMethod = this.assignNewQuoteMethod.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\n      \"https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json\"\n    )\n      .then((data) => data.json())\n      .then((quotes) => this.setState({ quotes }, this.assignNewQuoteMethod));\n  }\n\n  selectedIndex() {\n    if (!this.state.quotes.length) {\n      return undefined;\n    }\n    return random(0, this.state.quotes.length - 1);\n  }\n\n  get selectedQuote() {\n    if (\n      !this.state.quotes.length ||\n      !Number.isInteger(this.state.selectedIndex)\n    ) {\n      return undefined;\n    }\n\n    return this.state.quotes[this.state.selectedIndex];\n  }\n  assignNewQuoteMethod() {\n    this.setState({ selectedIndex: this.selectedIndex() });\n  }\n\n  render() {\n    console.log(this.state.selectedIndex);\n    return (\n      <Grid\n        className={this.props.classes.root}\n        id=\"quote-box\"\n        justify=\"center\"\n        container\n      >\n        <Grid xs={11} lg={4} item>\n          {this.selectedQuote ? (\n            <QuoteMashine\n              selectedQuote={this.selectedQuote}\n              assignNewQuoteMethod={this.assignNewQuoteMethod}\n            />\n          ) : null}\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}